services:
  traefik:
    command:
      # By default, the level is set to ERROR. Alternative logging levels are 
      # DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      - --log.level=ERROR
      - --global.sendAnonymousUsage=false
      # Enable Dashboard
      - --api.insecure=false
      - --api.dashboard=true
      - --api.debug=true
      # (Optional) Enable Prometheus Metrics
      #- --metrics.prometheus=true
      #- --metrics.prometheus.addEntryPointsLabels=true
      #- --metrics.prometheus.addrouterslabels=true
      #- --metrics.prometheus.addServicesLabels=true
      #- --metrics.prometheus.entryPoint=websecure
      # We are using Docker
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # (Optional) Set default hostname if not given explicitly
      - --providers.docker.defaultRule=Host("${CUSTOM_HOSTNAME}")
      # Listen on port 80 (http)
      - --entrypoints.web.address=:80
      # Listen on port 443 (https)
      - --entrypoints.websecure.address=:443
      # Listen on port 8080 (traefik Dashboard)
      - --entrypoints.traefik_https.address=:8080
      # Watch dynamic configuration file
      - --providers.file.directory=/conf
      - --providers.file.watch=true
      # Enable Access Log
      - --accesslog.filepath=/var/log/www/access.log
      # Automaticly redirect from http to https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https

      ################ START SSL configuration ################
      # ---------> Cloudflare <---------
      # DNS challenge via Cloudflare
      - --certificatesresolvers.cloudflare.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/ssl/acme.json
      - --certificatesresolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnsChallenge.delayBeforeCheck=60
      - --certificatesresolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53
      # (Optional) Use testing server before receiving the productive ssl certificate
      #- --certificatesresolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --entrypoints.websecure.http.tls.domains[0].main=${CUSTOM_HOSTNAME}
      # (Optional) Use only, if you are able to receive a wildcard ssl certificate
      - --entrypoints.websecure.http.tls.domains[0].main=*.${CUSTOM_HOSTNAME}
      # --------------------------------
      ################  END SSL configuration  ################

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Dynamic configuration files
      - ./conf:/conf
      # Enable Access Log
      - ./logs/:/var/log/www/
      # LetsEncrypt Configuration Storage
      - ./ssl:/ssl
    labels:
      # Enable Traefik
      - traefik.enable=true
      # Set Network to use
      - traefik.docker.network=traefik_ext
      # Load dynamic config
      - traefik.http.routers.traefik_https.middlewares=secHeaders@file,def-compress
      # Enable gzip compression
      - traefik.http.middlewares.def-compress.compress=true

      - traefik.http.routers.traefik_https.entrypoints=traefik_https
      - traefik.http.routers.traefik_https.rule=Host(`${CUSTOM_HOSTNAME}`) && PathPrefix(`/api`) || PathPrefix(`/dashboard`)
      - traefik.http.routers.traefik_https.tls=true
      - traefik.http.routers.traefik_https.tls.certResolver=cloudflare
      - traefik.http.routers.traefik_https.service=api@internal
      #
      # (Optional) Enable Prometheus Metrics
      #- traefik.http.routers.traefik_metrics.entrypoints=websecure
      #- traefik.http.routers.traefik_metrics.rule=Host(`${CUSTOM_HOSTNAME}`) && PathPrefix(`/metrics`)
      #- traefik.http.routers.traefik_metrics.tls=true
      #- traefik.http.routers.traefik_metrics.tls.certResolver=cloudflare
      #- traefik.http.routers.traefik_metrics.middlewares=traefik-auth
      #
      # (Optional) Enable Basic-Auth
      # Username: admin
      # Password: verySafePassword
      # Encrypt Password via 'echo $(htpasswd -nB nadmin) | sed -e s/\\$/\\$\\$/g'
      #- traefik.http.middlewares.traefik-auth.basicauth.users=admin:ENCRYPTED_verySafePassword
      #- traefik.http.routers.traefik_https.middlewares=traefik-auth
