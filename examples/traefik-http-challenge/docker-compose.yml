version: "3"

services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:latest
    container_name: traefik
    restart: always
    env_file: .env
    command:
      # Send usage statistics (or not)
      - "--global.sendAnonymousUsage=false"
      # By default, the level is set to ERROR. Alternative logging levels are 
      # DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      - "--log.level=WARN"
      # Enable Access Log
      - "--accesslog.filepath=/var/log/www/access.log"
      # Enable Dashboard
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--api.debug=true"
      # We are using Docker
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # (Optional) Set default hostname if not given explicitly
      - "--providers.docker.defaultRule=Host(${CUSTOM_HOSTNAME})"
      # Listen on port 80 (http)
      - "--entrypoints.web.address=:80"
      # Listen on port 443 (https)
      - "--entrypoints.websecure.address=:443"
      # Listen on port 8080 (traefik Dashboard)
      - "--entrypoints.dashboard.address=:8080"
      # Watch dynamic configuration file
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      #
      # (Optional) Enable Prometheus Metrics
      #- "--metrics.prometheus=true"
      #- "--metrics.prometheus.addEntryPointsLabels=true"
      #- "--metrics.prometheus.addrouterslabels=true"
      #- "--metrics.prometheus.addServicesLabels=true"
      #- "--metrics.prometheus.entryPoint=websecure"

      ################ START SSL configuration ################
      # ---------> LetsEncrypt <---------
      # Enable LetsEncrypt HTTP-Challenge
      - "--certificatesresolvers.le_http_challenge.acme.httpchallenge=true"
      - "--certificatesresolvers.le_http_challenge.acme.httpchallenge.entrypoint=web"
      #- "--certificatesresolvers.le_http_challenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.le_http_challenge.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.le_http_challenge.acme.storage=/ssl/acme.json"
      # Automaticly redirect from http to https
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      ################  END SSL configuration  ################

    volumes:
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Dynamic configuration files
      - "./conf:/conf:ro"
      # Enable Access Log
      - "./logs/:/var/log/www/"
      # LetsEncrypt Configuration Storage
      - "./ssl:/ssl"
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      # Set Network to use
      #- "traefik.docker.network=traefik_ext"
      # Enable gzip compression
      - "traefik.http.middlewares.gzip.compress=true"
      # Load dynamic config
      - "traefik.http.routers.dashboard.middlewares=secHeaders@file,gzip"

      - "traefik.http.routers.dashboard.middlewares=gzip"
      - "traefik.http.routers.dashboard.entrypoints=dashboard"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${CUSTOM_HOSTNAME}`) && PathPrefix(`/api`, `/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certResolver=le_http_challenge"
      #
      # (Optional) Enable Basic-Auth
      # Username: admin
      # Password: verySafePassword
      # Encrypt Password via 'echo $(htpasswd -nB nadmin) | sed -e s/\\$/\\$\\$/g'
      #- "traefik.http.routers.dashboard.middlewares=traefik-auth"
      #- "traefik.http.middlewares.traefik-auth.basicauth.users=admin:verySafePassword"
      #
      # (Optional) Enable Prometheus Metrics
      #- "traefik.http.routers.traefik_metrics.entrypoints=websecure"
      #- "traefik.http.routers.traefik_metrics.rule=Host(`${CUSTOM_HOSTNAME}`) && PathPrefix(`/metrics`)"
      #- "traefik.http.routers.traefik_metrics.tls=true"
      #- "traefik.http.routers.traefik_metrics.tls.certResolver=cloudflare"
      #- "traefik.http.routers.traefik_metrics.middlewares=traefik-auth"

  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    restart: "unless-stopped"
    depends_on:
      - "traefik"
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      # Set Network to use
      #- "traefik.docker.network=traefik_ext"
      # Enable gzip compression
      - "traefik.http.middlewares.gzip.compress=true"
      # Load dynamic config
      - "traefik.http.routers.whoami.middlewares=secHeaders@file,gzip"
      #- "traefik.http.routers.whoami.middlewares=gzip"
      #- "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${CUSTOM_HOSTNAME}`)"
      - "traefik.http.routers.whoami.tls.certresolver=le_http_challenge"
    networks:
      - "traefik_ext"

# Create networks manually before starting this compose
networks:
  # docker network create traefik_ext
  traefik_ext:
    external: true
  # docker network create traefik_int --internal
  #traefik_int:
  #  external: true
